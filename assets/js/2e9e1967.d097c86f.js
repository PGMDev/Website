"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[726],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>p});var l=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,l,r=function(e,t){if(null==e)return{};var n,l,r={},a=Object.keys(e);for(l=0;l<a.length;l++)n=a[l],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(l=0;l<a.length;l++)n=a[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=l.createContext({}),u=function(e){var t=l.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return l.createElement(i.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},d=l.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(n),p=r,h=d["".concat(i,".").concat(p)]||d[p]||m[p]||a;return n?l.createElement(h,o(o({ref:t},c),{},{components:n})):l.createElement(h,o({ref:t},c))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var u=2;u<a;u++)o[u]=n[u];return l.createElement.apply(null,o)}return l.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1734:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var l=n(7462),r=(n(7294),n(3905));const a={id:"lanes",title:"Lanes"},o=void 0,s={unversionedId:"modules/mechanics/lanes",id:"modules/mechanics/lanes",title:"Lanes",description:"Lanes are used in Race for Wool (RFW) style maps with two parallel lanes for the teams. They prevent players from leaving their team's lane and entering the enemies.",source:"@site/docs/modules/mechanics/lanes.mdx",sourceDirName:"modules/mechanics",slug:"/modules/mechanics/lanes",permalink:"/docs/modules/mechanics/lanes",draft:!1,editUrl:"https://github.com/PGMDev/Website/tree/master/src/docs/modules/mechanics/lanes.mdx",tags:[],version:"current",frontMatter:{id:"lanes",title:"Lanes"},sidebar:"docs",previous:{title:"Proximity Alarms",permalink:"/docs/modules/mechanics/proximity-alarms"},next:{title:"Damage",permalink:"/docs/modules/mechanics/damage"}},i={},u=[{value:"Lanes Element",id:"lanes-element",level:4},{value:"Lane Attributes",id:"lane-attributes",level:3}],c={toc:u};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,l.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Lanes are used in Race for Wool (RFW) style maps with two parallel lanes for the teams. They prevent players from leaving their team's lane and entering the enemies."),(0,r.kt)("h4",{id:"lanes-element"},"Lanes Element"),(0,r.kt)("div",{className:"table-container"},(0,r.kt)("table",null,(0,r.kt)("thead",null,(0,r.kt)("tr",null,(0,r.kt)("th",null,"Element"),(0,r.kt)("th",null,"Description"),(0,r.kt)("th",null,"Value/Children"))),(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("label",null,"<lanes> </lanes>")),(0,r.kt)("td",null,"Node containing this world's lanes."),(0,r.kt)("td",null)),(0,r.kt)("tr",null,(0,r.kt)("th",null,"Sub-elements"),(0,r.kt)("th",null),(0,r.kt)("th",null)),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("label",null,"<lane> </lane>")),(0,r.kt)("td",null,"A single lane definition."),(0,r.kt)("td",null,(0,r.kt)("a",{href:"/docs/modules/mechanics/regions"},"Regions")))))),(0,r.kt)("h3",{id:"lane-attributes"},"Lane Attributes"),(0,r.kt)("div",{className:"table-container"},(0,r.kt)("table",null,(0,r.kt)("thead",null,(0,r.kt)("tr",null,(0,r.kt)("th",null,"Attribute"),(0,r.kt)("th",null,"Description"),(0,r.kt)("th",null,"Value"))),(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("label",null,"team")),(0,r.kt)("td",null,(0,r.kt)("span",{className:"badge badge--danger"},"Required"),"The team the lane belongs to and in which they have to stay inside."),(0,r.kt)("td",null,(0,r.kt)("a",{href:"/docs/modules/format/teams"},"Team ID")))))),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<lanes>\n    <lane team="blue">\n        <region id="blue-lane-total"/>\n        <region id="blue-spawn-rooms"/>\n    </lane>\n    <lane team="red">\n        <region id="red-lane-total"/>\n        <region id="red-spawn-rooms"/>\n    </lane>\n</lanes>\n')))}m.isMDXComponent=!0}}]);