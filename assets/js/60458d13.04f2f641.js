"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9547],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>g});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(t),u=i,g=m["".concat(s,".").concat(u)]||m[u]||c[u]||a;return t?r.createElement(g,o(o({ref:n},d),{},{components:t})):r.createElement(g,o({ref:n},d))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[m]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<a;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5004:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=t(7462),i=(t(7294),t(3905));const a={id:"applying-to-regions",title:"Using Filters and Regions"},o=void 0,l={unversionedId:"guides/xml-pointers/applying-to-regions",id:"guides/xml-pointers/applying-to-regions",title:"Using Filters and Regions",description:"Regions define areas that can later be applied to Filters",source:"@site/docs/guides/xml-pointers/applying-to-regions.mdx",sourceDirName:"guides/xml-pointers",slug:"/guides/xml-pointers/applying-to-regions",permalink:"/docs/guides/xml-pointers/applying-to-regions",draft:!1,editUrl:"https://github.com/PGMDev/Website/tree/master/src/docs/guides/xml-pointers/applying-to-regions.mdx",tags:[],version:"current",frontMatter:{id:"applying-to-regions",title:"Using Filters and Regions"},sidebar:"Guides",previous:{title:"Defining Regions",permalink:"/docs/guides/xml-pointers/regions"},next:{title:"Filter Apply Order",permalink:"/docs/guides/xml-pointers/filter-apply-order"}},s={},p=[{value:"Creating a Filter",id:"creating-a-filter",level:2},{value:"Creating a Region",id:"creating-a-region",level:2},{value:"Applying a Filter to a Region",id:"applying-a-filter-to-a-region",level:2},{value:"Applying things to multiple regions",id:"applying-things-to-multiple-regions",level:2}],d={toc:p},m="wrapper";function c(e){let{components:n,...t}=e;return(0,i.kt)(m,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Regions define areas that can later be applied to ",(0,i.kt)("a",{parentName:"p",href:"/docs/modules/mechanics/filters"},"Filters"),"\nand other modules.\nUnderstanding how modules, regions and filters work together is important to make critical mechanics for a map."),(0,i.kt)("h2",{id:"creating-a-filter"},"Creating a Filter"),(0,i.kt)("p",null,"Creating a ",(0,i.kt)("a",{parentName:"p",href:"/docs/modules/mechanics/filters"},"Filter")," allows us to put restrictions on certain events.\nWe want to stop players from entering their enemy's spawn region, usually to prevent spawnkilling.\nOur goal is to filter players that are entering a region, so we will make basic filters that matches for\nplayers on a certain team."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<filters>\n    \x3c!-- Filter will pass ALLOW if player is on Red Team --\x3e\n    <team id="only-red">red-team</team>\n    <team id="only-blue">blue-team</team>\n</filters>\n')),(0,i.kt)("h2",{id:"creating-a-region"},"Creating a Region"),(0,i.kt)("p",null,"Creating a ",(0,i.kt)("a",{parentName:"p",href:"docs/modules/mechanics/filters"},"Region")," involves certain world coordinates.\nIn this example, we will create simple ",(0,i.kt)("inlineCode",{parentName:"p"},"<cuboid/>")," regions inside a ",(0,i.kt)("inlineCode",{parentName:"p"},"<union>"),", which we will save with IDs\nwhich we can reference for later use."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<regions>\n    <union id="spawns">\n        <cuboid id="red-spawn" min="20,0,55" max="40,10,75"/>\n        <cuboid id="blue-spawn" min="10,0,-55" max="30,10,-75"/>\n    </union>\n</regions>\n')),(0,i.kt)("h2",{id:"applying-a-filter-to-a-region"},"Applying a Filter to a Region"),(0,i.kt)("p",null,"Applying filters to a region is done inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"<regions>")," module.\nWhen we make our ",(0,i.kt)("inlineCode",{parentName:"p"},"<apply/>")," module, we can use the IDs in our region and filter to reference them as a variable.\nOut of the various ",(0,i.kt)("a",{parentName:"p",href:"/docs/modules/mechanics/regions#apply-element-attributes"},"events"),",\nwe will use the ",(0,i.kt)("inlineCode",{parentName:"p"},"enter")," event.\nWhen a player enters ",(0,i.kt)("inlineCode",{parentName:"p"},"red-spawn"),", we want to make sure that only players on the red team are able to enter it.\nSo we apply our ",(0,i.kt)("inlineCode",{parentName:"p"},"only-red")," filter to players that are entering it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<filters>\n    <team id="only-red">red-team</team>\n    <team id="only-blue">blue-team</team>\n</filters>\n<regions>\n    <union id="spawns">\n        <cuboid id="red-spawn" min="20,0,55" max="40,10,75"/>\n        <cuboid id="blue-spawn" min="10,0,-55" max="30,10,-75"/>\n    </union>\n    \x3c!-- checks only-red if a player is allowed to enter --\x3e\n    <apply region="red-spawn" enter="only-red"/>\n    <apply region="blue-spawn" enter="only-blue"/>\n</regions>\n')),(0,i.kt)("h2",{id:"applying-things-to-multiple-regions"},"Applying things to multiple regions"),(0,i.kt)("p",null,"Typically we want to prevent players from placing or breaking any blocks in spawn, but\nwe have two spawn regions defined in our XML, and both need spawn protection.\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"<union>")," element using the ID ",(0,i.kt)("inlineCode",{parentName:"p"},"spawns")," combines the two team spawns into a single region.\nUsing ",(0,i.kt)("inlineCode",{parentName:"p"},"spawns")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"<apply/>")," will let us apply a filter to both regions.\nWe will use the built-in ",(0,i.kt)("inlineCode",{parentName:"p"},"never")," filter, which denies everything.\nThis XML protects spawn from being damaged by players, TNT, mobs, etc and prevents\nplayers from entering their enemy's spawn room, but can still safely enter their own."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<filters>\n    <team id="only-red">red-team</team>\n    <team id="only-blue">blue-team</team>\n</filters>\n<regions>\n    <union id="spawns">\n        <cuboid id="red-spawn" min="20,0,55" max="40,10,75"/>\n        <cuboid id="blue-spawn" min="10,0,-55" max="30,10,-75"/>\n    </union>\n    <apply region="red-spawn" enter="only-red"/>\n    <apply region="blue-spawn" enter="only-blue"/>\n    \x3c!-- denies all block breaking and placing in both red-spawn and blue-spawn --\x3e\n    <apply region="spawns" block="never"/>\n</regions>\n')))}c.isMDXComponent=!0}}]);