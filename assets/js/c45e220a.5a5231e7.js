"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3027],{8529:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>c,contentTitle:()=>n,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>d});var s=r(5893),i=r(1151);const t={id:"variables",title:"Variables"},n=void 0,l={id:"modules/mechanics/variables",title:"Variables",description:"Variables are used to store information that can later be used in a filter.",source:"@site/docs/modules/mechanics/variables.mdx",sourceDirName:"modules/mechanics",slug:"/modules/mechanics/variables",permalink:"/docs/modules/mechanics/variables",draft:!1,unlisted:!1,editUrl:"https://github.com/PGMDev/Website/tree/master/docs/modules/mechanics/variables.mdx",tags:[],version:"current",frontMatter:{id:"variables",title:"Variables"},sidebar:"docs",previous:{title:"Actions & Triggers",permalink:"/docs/modules/mechanics/actions-triggers"},next:{title:"Spawns",permalink:"/docs/modules/mechanics/spawns"}},c={},d=[{value:"Variable Element",id:"variable-element",level:2},{value:"Variable Attributes",id:"variable-attributes",level:3},{value:"With-Team Attributes",id:"with-team-attributes",level:3},{value:"Examples",id:"examples",level:2},{value:"Setting Variables",id:"setting-variables",level:3},{value:"Using a Variable In a Filter",id:"using-a-variable-in-a-filter",level:3},{value:"Using Exclusive Dummy Variables",id:"using-exclusive-dummy-variables",level:3},{value:"Team-Rescoping Variables",id:"team-rescoping-variables",level:3},{value:"General Example",id:"general-example",level:3}];function o(e){const a={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(a.p,{children:["Variables are used to store information that can later be used in a filter.\nValues are changed using the ",(0,s.jsx)(a.a,{href:"/docs/modules/mechanics/actions-triggers",children:"Actions & Triggers"})," mechanic.\nAfterwards, they can be used as a ",(0,s.jsx)(a.a,{href:"/docs/modules/mechanics/filters#variable-filter",children:"Filter"})," after meeting a certain number or range.\nYou can define as many variables as you want and all variables must have a scope defined."]}),"\n",(0,s.jsx)(a.h2,{id:"variable-element",children:"Variable Element"}),"\n",(0,s.jsxs)("div",{className:"table-container",children:[(0,s.jsxs)(a.table,{children:[(0,s.jsx)(a.thead,{children:(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.th,{children:"Element"}),(0,s.jsx)(a.th,{children:"Description"})]})}),(0,s.jsx)(a.tbody,{children:(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.td,{children:(0,s.jsx)(a.code,{children:"<variables> </variables>"})}),(0,s.jsx)(a.td,{children:"A node containing the variables for this map."})]})})]}),(0,s.jsxs)(a.table,{children:[(0,s.jsx)(a.thead,{children:(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.th,{children:"Sub-elements"}),(0,s.jsx)(a.th,{})]})}),(0,s.jsxs)(a.tbody,{children:[(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.td,{children:(0,s.jsx)(a.code,{children:"<variable/>"})}),(0,s.jsx)(a.td,{children:"An individual variable."})]}),(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.td,{children:(0,s.jsx)(a.code,{children:"<score/>"})}),(0,s.jsx)(a.td,{children:"A score variable, allowing direct access to competitor's score. This is automatically scoped to teams."})]}),(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.td,{children:(0,s.jsx)(a.code,{children:"<with-team/>"})}),(0,s.jsx)(a.td,{children:"A team-rescoping variable that allows using a specific team's value from a different team-scoped variable as a match-scoped variable."})]})]})]})]}),"\n",(0,s.jsx)(a.h3,{id:"variable-attributes",children:"Variable Attributes"}),"\n",(0,s.jsx)("div",{className:"table-container",children:(0,s.jsxs)(a.table,{children:[(0,s.jsx)(a.thead,{children:(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.th,{children:"Attribute"}),(0,s.jsx)(a.th,{children:"Description"}),(0,s.jsx)(a.th,{children:"Value"})]})}),(0,s.jsxs)(a.tbody,{children:[(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.td,{children:(0,s.jsx)(a.code,{children:"id"})}),(0,s.jsx)(a.td,{children:"Unique identifier used to reference this variable from other places in the XML."}),(0,s.jsx)(a.td,{children:(0,s.jsx)("span",{className:"badge badge--primary",children:"String"})})]}),(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.td,{children:(0,s.jsx)(a.code,{children:"exclusive"})}),(0,s.jsxs)(a.td,{children:["Limits how many different values there can be in a variable.",(0,s.jsx)("br",{}),(0,s.jsx)(a.em,{children:"Values between 1 and 50 are supported, higher values may lead to performance issues."})]}),(0,s.jsx)(a.td,{children:(0,s.jsx)("span",{className:"badge badge--primary",children:"Number"})})]}),(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.td,{children:(0,s.jsx)(a.code,{children:"scope"})}),(0,s.jsxs)(a.td,{children:["Defines what the variable will be applied to.",(0,s.jsx)("br",{}),(0,s.jsx)(a.em,{children:"Variables scoped to a player will give each player a unique value that will be preserved, even if they switch teams."})]}),(0,s.jsxs)(a.td,{children:[(0,s.jsx)(a.code,{children:"player"}),", ",(0,s.jsx)(a.code,{children:"team"}),", or ",(0,s.jsx)(a.code,{children:"match"})]})]}),(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.td,{children:(0,s.jsx)(a.code,{children:"default"})}),(0,s.jsx)(a.td,{children:"Sets the initial value of the variable."}),(0,s.jsx)(a.td,{children:(0,s.jsx)("span",{className:"badge badge--primary",children:"Number"})})]})]})]})}),"\n",(0,s.jsx)(a.h3,{id:"with-team-attributes",children:"With-Team Attributes"}),"\n",(0,s.jsx)("div",{className:"table-container",children:(0,s.jsxs)(a.table,{children:[(0,s.jsx)(a.thead,{children:(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.th,{children:"Attribute"}),(0,s.jsx)(a.th,{children:"Description"}),(0,s.jsx)(a.th,{children:"Value"})]})}),(0,s.jsxs)(a.tbody,{children:[(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.td,{children:(0,s.jsx)(a.code,{children:"id"})}),(0,s.jsx)(a.td,{children:"Unique identifier used to reference this with-team variable from other places in the XML."}),(0,s.jsx)(a.td,{children:(0,s.jsx)("span",{className:"badge badge--primary",children:"String"})})]}),(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.td,{children:(0,s.jsx)(a.code,{children:"var"})}),(0,s.jsx)(a.td,{children:"The variable to target."}),(0,s.jsx)(a.td,{children:(0,s.jsx)(a.a,{href:"#variable-attributes",children:"Variable ID"})})]}),(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.td,{children:(0,s.jsx)(a.code,{children:"team"})}),(0,s.jsx)(a.td,{children:"The team to target."}),(0,s.jsx)(a.td,{children:(0,s.jsx)(a.a,{href:"/docs/modules/format/teams#team-attributes",children:"Team ID"})})]})]})]})}),"\n",(0,s.jsx)(a.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(a.h3,{id:"setting-variables",children:"Setting Variables"}),"\n",(0,s.jsxs)(a.p,{children:["Setting variables are done inside the ",(0,s.jsx)(a.a,{href:"/docs/modules/mechanics/actions-triggers",children:"Actions & Triggers"})," mechanic.\nThe ",(0,s.jsx)(a.code,{children:"<set>"})," action which changes the variables, waits to be called by a trigger after a filter activates it.\nThe ",(0,s.jsx)(a.code,{children:"value"})," attribute can do any basic mathematical expressions."]}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)(a.em,{children:"Example"})}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-xml",children:'<actions>\n    <action id="increment-flag-cap" scope="team">\n        \x3c!-- increments the current value by 1 --\x3e\n        <set var="flag_captures" value="flag_captures+1">\n    </action>\n    <trigger filter="flag-cap-filter" action="score-points" scope="player"/>\n</action>\n\n...\n\x3c!-- Sets some_variable to 0, 1, 2, 3, or 4 randomly --\x3e\n<set var="some_variable" value="floor(random() * 5)"/>\n...\n'})}),"\n",(0,s.jsxs)(a.p,{children:["In this example, the ",(0,s.jsx)(a.code,{children:"flag_captures"})," variable will increment by 1 after a player completes ",(0,s.jsx)(a.code,{children:"flag-cap-filter"}),"."]}),"\n",(0,s.jsx)(a.h3,{id:"using-a-variable-in-a-filter",children:"Using a Variable In a Filter"}),"\n",(0,s.jsxs)(a.p,{children:["The variable can then be used in the ",(0,s.jsx)(a.a,{href:"/docs/modules/mechanics/filters#variable-filter",children:"Variable Filter"}),"\nto be utilized in another Action or other module that uses filters.\nThe variable filter can match for a single number or a range of numbers."]}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)(a.em,{children:"Example"})}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-xml",children:'\x3c!-- Match if next_post has a value of 1 --\x3e\n<variable id="next_blue" var="next_post">1</variable>\n\x3c!-- Match if t_score is >= 100 --\x3e\n<variable id="reached_score" var="t_score">[100,oo)</variable>\n\n\x3c!-- Match if t_score is between 5 and 10 (including 5 and 10) --\x3e\n<variable id="reached_score" var="t_score">[5,10]</variable>\n\x3c!-- Match if t_score is between 5 and 10 (excluding 5 and 10) --\x3e\n<variable id="reached_score" var="t_score">(5,10)</variable>\n\x3c!-- Match if t_score is between 0 and 10 (including 0 and excluding 10) --\x3e\n<variable id="reached_score" var="t_score">[0,10)</variable>\n'})}),"\n",(0,s.jsx)(a.h3,{id:"using-exclusive-dummy-variables",children:"Using Exclusive Dummy Variables"}),"\n",(0,s.jsxs)(a.p,{children:["In this example, the ",(0,s.jsx)(a.code,{children:"last_scored"})," variable would, at most, have a value for one team.\nThis in practice means that all other teams will always be reset to default whenever a team is set.\nIn the ",(0,s.jsx)(a.code,{children:"other"}),' example, the "last 2" updated players will be kept, while players who got in "earlier", are removed.']}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-xml",children:'<variables>\n    <variable id="last_scored" exclusive="1" scope="team" />\n    <variable id="other" exclusive="2" scope="player" />\n</variables>\n'})}),"\n",(0,s.jsxs)(a.p,{children:["In this example, we want the team which gets the ",(0,s.jsx)(a.code,{children:"on-score"})," action to add one, but the opposite team(s) to subtract one from their score, with ",(0,s.jsx)(a.code,{children:"exclusive"})," it looks like this:"]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-xml",children:'<variables>\n    <score id="team_score" scope="team"/>\n    <variable id="last_scored" exclusive="1" scope="team"/>\n</variables>\n<actions>\n    <action id="on-score" scope="team">\n        <set var="team_score" value="team_score+1"/>\n        <set var="last_scored" value="1"/>\n        <switch-scope inner="match">\n            <switch-scope inner="team" filter="last_scored=0">\n                <set var="team_score" value="team_score-1"/>\n            </switch-scope>\n        </switch-scope>\n    </action>\n</actions>\n'})}),"\n",(0,s.jsx)(a.h3,{id:"team-rescoping-variables",children:"Team-Rescoping Variables"}),"\n",(0,s.jsxs)(a.p,{children:["Whenever ",(0,s.jsx)(a.code,{children:"some-filter"})," matches for a player (e.g. entering a region), it will trigger an action that sets red team's score to exactly 10, then adds 5 to the score of the team the player is in.\nIn short, if a player in red team triggers ",(0,s.jsx)(a.code,{children:"some-filter"}),", red is reset to 10 + 5 = 15, no other scores are affected.\nIf a player in blue team triggers ",(0,s.jsx)(a.code,{children:"some-filter"}),", red is reset to 10, and blue wins 5 points."]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-xml",children:'<variables>\n    <score id="team_score"/>\n    <with-team id="red_team_score" var="team_score" team="red"/>\n\n    <variable id="other" scope="team"/> \x3c!-- A dummy team variable --\x3e\n    \x3c!-- A match-scoped variable for the value of other for red team --\x3e\n    <with-team id="other_red" var="other" team="red"/>\n    \x3c!-- A match-scoped variable for the value of other for blue team --\x3e\n    <with-team id="other_blue" var="other" team="blue"/>\n</variables>\n\n<actions>\n    <trigger scope="player" filter="some-filter">\n        <action>\n            <set var="red_team_score" value="10"/>\n            <set var="team_score" value="team_score+5"/>\n        <action>\n    </trigger>\n</actions>\n'})}),"\n",(0,s.jsx)(a.h3,{id:"general-example",children:"General Example"}),"\n",(0,s.jsxs)(a.p,{children:["In this example, when a player first enters ",(0,s.jsx)(a.code,{children:"region-a"}),", the team score and later the player score is\nincreased by 5. The second time the same player enters, the team will score an additional 10 points,\nwith the player score continuing to increment by 5. Once the team gets 100 points or higher, a message indicating this will be sent."]}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-xml",children:'<variables>\n    \x3c!-- Initializes the variables --\x3e\n    <variable id="team_score" scope="team"/>\n    <variable id="player_score" scope="player" default="5"/>\n</variables>\n<actions>\n    <action id="score-points" scope="player"/>\n        \x3c!-- team_score = team_score + player_score --\x3e\n        \x3c!-- Adds the player\'s score to the team score --\x3e\n        <set var="team_score" value="team_score+player_score"/>\n        \x3c!-- Adds 5 points to the player\'s score --\x3e\n        <set var="player_score" value="player_score+5"/>\n    </action>\n    \x3c!-- Triggers the above score-points action when a player enters region-a --\x3e\n    <trigger filter="region-a" action="score-points" scope="player"/>\n    \x3c!-- Sends a message to the team once the filter reached-score passes Allow --\x3e\n    <trigger filter="reached-score" action="completed" scope="team"/>\n    <message id="completed" text="The team reached 100 points!"/>\n</action>\n<filters>\n    \x3c!-- Allows when the t_score variable is greater than or equal to 100 --\x3e\n    <variable id="reached-score" var="t_score">[100,oo)</variable>\n</filters>\n'})})]})}function h(e={}){const{wrapper:a}={...(0,i.a)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},1151:(e,a,r)=>{r.d(a,{Z:()=>l,a:()=>n});var s=r(7294);const i={},t=s.createContext(i);function n(e){const a=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function l(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:n(e.components),s.createElement(t.Provider,{value:a},e.children)}}}]);