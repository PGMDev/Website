"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3457],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var l=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,l)}return r}function d(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,l,n=function(e,t){if(null==e)return{};var r,l,n={},o=Object.keys(e);for(l=0;l<o.length;l++)r=o[l],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(l=0;l<o.length;l++)r=o[l],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var i=l.createContext({}),s=function(e){var t=l.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):d(d({},t),e)),r},u=function(e){var t=s(e.components);return l.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},b=l.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),b=s(r),m=n,k=b["".concat(i,".").concat(m)]||b[m]||c[m]||o;return r?l.createElement(k,d(d({ref:t},u),{},{components:r})):l.createElement(k,d({ref:t},u))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,d=new Array(o);d[0]=b;var a={};for(var i in t)hasOwnProperty.call(t,i)&&(a[i]=t[i]);a.originalType=e,a.mdxType="string"==typeof e?e:n,d[1]=a;for(var s=2;s<o;s++)d[s]=r[s];return l.createElement.apply(null,d)}return l.createElement.apply(null,r)}b.displayName="MDXCreateElement"},130:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>d,default:()=>c,frontMatter:()=>o,metadata:()=>a,toc:()=>s});var l=r(7462),n=(r(7294),r(3905));const o={id:"border",title:"World Border"},d=void 0,a={unversionedId:"modules/environment/border",id:"modules/environment/border",title:"World Border",description:"The world border module uses the default minecraft world border and allows customization of its size, position and behavior. Only one world border definition can be active at a time.",source:"@site/docs/modules/environment/border.mdx",sourceDirName:"modules/environment",slug:"/modules/environment/border",permalink:"/docs/modules/environment/border",draft:!1,editUrl:"https://github.com/PGMDev/Website/tree/master/src/docs/modules/environment/border.mdx",tags:[],version:"current",frontMatter:{id:"border",title:"World Border"},sidebar:"docs",previous:{title:"Time & Dimension",permalink:"/docs/modules/environment/time"},next:{title:"Mob Spawning",permalink:"/docs/modules/environment/mobs"}},i={},s=[{value:"World Borders Attributes",id:"world-borders-attributes",level:5},{value:"World Border Sub-elements",id:"world-border-sub-elements",level:5}],u={toc:s};function c(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,l.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"The world border module uses the default minecraft world border and allows customization of its size, position and behavior. Only one world border definition can be active at a time."),(0,n.kt)("p",null,"Attributes for multiple world borders can be applied for all borders by specifying them in the root ",(0,n.kt)("inlineCode",{parentName:"p"},"<world-borders>")," element."),(0,n.kt)("div",{className:"table-container"},(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Element"),(0,n.kt)("th",null,"Description"),(0,n.kt)("th",null,"Value/Children"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,(0,n.kt)("label",null,"<world-borders> </world-borders>")),(0,n.kt)("td",null,"Node containing all the defined world borders."),(0,n.kt)("td",null)),(0,n.kt)("tr",null,(0,n.kt)("th",null,"Sub-elements"),(0,n.kt)("th",null),(0,n.kt)("th",null)),(0,n.kt)("tr",null,(0,n.kt)("td",null,(0,n.kt)("label",null,"<world-border>")),(0,n.kt)("td",null,"A single world border."),(0,n.kt)("td",null,(0,n.kt)("span",{className:"badge badge--secondary"},"World Border Sub-elements")))))),(0,n.kt)("h5",{id:"world-borders-attributes"},"World Borders Attributes"),(0,n.kt)("div",{className:"table-container"},(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",{style:{minWidth:"150px"}},"Attribute"),(0,n.kt)("th",null,"Description"),(0,n.kt)("th",null,"Value"),(0,n.kt)("th",null,"Default"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,(0,n.kt)("label",null,"center")),(0,n.kt)("td",null,(0,n.kt)("span",{className:"badge badge--danger"},"Required"),"The center of this world border."),(0,n.kt)("td",null,(0,n.kt)("span",{className:"badge badge--primary"},"X,Z")),(0,n.kt)("td",null)),(0,n.kt)("tr",null,(0,n.kt)("td",null,(0,n.kt)("label",null,"size")),(0,n.kt)("td",null,(0,n.kt)("span",{className:"badge badge--danger"},"Required"),"The diameter of the world border, borders are always square."),(0,n.kt)("td",null,(0,n.kt)("span",{className:"badge badge--primary"},"Number")),(0,n.kt)("td",null)),(0,n.kt)("tr",null,(0,n.kt)("td",null,(0,n.kt)("label",null,"when")),(0,n.kt)("td",null,(0,n.kt)("span",{className:"badge badge--secondary",title:"Can be either this attribute or a sub-element."},"Property"),"Filter when this world border is in effect."),(0,n.kt)("td",null,(0,n.kt)("a",{href:"/docs/modules/mechanics/filters"},"Filter")),(0,n.kt)("td",null)),(0,n.kt)("tr",null,(0,n.kt)("td",null,(0,n.kt)("label",null,"after")),(0,n.kt)("td",null,"Time after which this border takes effect.",(0,n.kt)("br",null),(0,n.kt)("i",null,"Not compatible with the ",(0,n.kt)("label",null,"when")," property.")),(0,n.kt)("td",null,(0,n.kt)("a",{href:"/docs/reference/misc/time-periods"},"Time Period")),(0,n.kt)("td",null)),(0,n.kt)("tr",null,(0,n.kt)("td",null,(0,n.kt)("label",null,"duration")),(0,n.kt)("td",null,"The time it takes to transition from the previous state to this state."),(0,n.kt)("td",null,(0,n.kt)("a",{href:"/docs/reference/misc/time-periods"},"Time Period")),(0,n.kt)("td",null)),(0,n.kt)("tr",null,(0,n.kt)("td",null,(0,n.kt)("label",null,"damage")),(0,n.kt)("td",null,"Amount of damage per second inflicted to players for each meter they are outside the border."),(0,n.kt)("td",null,(0,n.kt)("span",{className:"badge badge--primary"},"Number")),(0,n.kt)("td",null,"0.2")),(0,n.kt)("tr",null,(0,n.kt)("td",null,(0,n.kt)("label",null,"buffer")),(0,n.kt)("td",null,"Distance to the edge of the border where damage to the player begins."),(0,n.kt)("td",null,(0,n.kt)("span",{className:"badge badge--primary"},"Number")),(0,n.kt)("td",null,"5")),(0,n.kt)("tr",null,(0,n.kt)("td",null,(0,n.kt)("label",null,"warning-distance")),(0,n.kt)("td",null,"Show red vignette to players closer than this to border."),(0,n.kt)("td",null,(0,n.kt)("span",{className:"badge badge--primary"},"Number")),(0,n.kt)("td",null,"5")),(0,n.kt)("tr",null,(0,n.kt)("td",null,(0,n.kt)("label",null,"warning-time")),(0,n.kt)("td",null,"Show red vignette to players when the border is moving and will reach them within this time."),(0,n.kt)("td",null,(0,n.kt)("a",{href:"/docs/reference/misc/time-periods"},"Time Period")),(0,n.kt)("td",null,"15s"))))),(0,n.kt)("h5",{id:"world-border-sub-elements"},"World Border Sub-elements"),(0,n.kt)("div",{className:"table-container"},(0,n.kt)("table",null,(0,n.kt)("thead",null,(0,n.kt)("tr",null,(0,n.kt)("th",null,"Element"),(0,n.kt)("th",null,"Description"),(0,n.kt)("th",null,"Value/Children"))),(0,n.kt)("tbody",null,(0,n.kt)("tr",null,(0,n.kt)("td",null,(0,n.kt)("label",null,"<when>")),(0,n.kt)("td",null,(0,n.kt)("span",{className:"badge badge--secondary",title:"Can be either this sub-element or an attribute."},"Property"),"Filter when this world border is in effect."),(0,n.kt)("td",null,(0,n.kt)("a",{href:"/docs/modules/mechanics/filters"},"Filter")))))),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"Examples")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-xml"},'<world-borders center="6.5, -36.5">\n    \x3c!-- Typical time-based shrinking border. Starts at 200 meters when the match loads. --\x3e\n    \x3c!-- After 5 minutes, it starts shrinking, until it is 20 meters wide at 15 minutes. --\x3e\n    <world-border size="200"/>\n    <world-border size="20" after="5m" duration="10m"/>\n</world-borders>\n\n\x3c!-- Borders can be controlled with filters (and will update dynamically). This is --\x3e\n\x3c!-- roughly how you would move a deadly border depending on which team controls a hill --\x3e\n<world-borders size="50" damage="20">\n    <world-border center="30, 0">\n        <when>\n            <objective team="red-team">control-point</objective>\n        </when>\n    </world-border>\n    <world-border center="-30, 0">\n        <when>\n            <objective team="blue-team">control-point</objective>\n        </when>\n    </world-border>\n</world-borders>\n')))}c.isMDXComponent=!0}}]);