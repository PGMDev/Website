"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8190],{3905:(t,e,n)=>{n.d(e,{Zo:()=>k,kt:()=>d});var l=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);e&&(l=l.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,l)}return n}function u(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,l,r=function(t,e){if(null==t)return{};var n,l,r={},a=Object.keys(t);for(l=0;l<a.length;l++)n=a[l],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(l=0;l<a.length;l++)n=a[l],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var o=l.createContext({}),i=function(t){var e=l.useContext(o),n=e;return t&&(n="function"==typeof t?t(e):u(u({},e),t)),n},k=function(t){var e=i(t.components);return l.createElement(o.Provider,{value:e},t.children)},c={inlineCode:"code",wrapper:function(t){var e=t.children;return l.createElement(l.Fragment,{},e)}},p=l.forwardRef((function(t,e){var n=t.components,r=t.mdxType,a=t.originalType,o=t.parentName,k=s(t,["components","mdxType","originalType","parentName"]),p=i(n),d=r,b=p["".concat(o,".").concat(d)]||p[d]||c[d]||a;return n?l.createElement(b,u(u({ref:e},k),{},{components:n})):l.createElement(b,u({ref:e},k))}));function d(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var a=n.length,u=new Array(a);u[0]=p;var s={};for(var o in e)hasOwnProperty.call(e,o)&&(s[o]=e[o]);s.originalType=t,s.mdxType="string"==typeof t?t:r,u[1]=s;for(var i=2;i<a;i++)u[i]=n[i];return l.createElement.apply(null,u)}return l.createElement.apply(null,n)}p.displayName="MDXCreateElement"},9640:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>o,contentTitle:()=>u,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>i});var l=n(7462),r=(n(7294),n(3905));const a={id:"spawn-reasons",title:"Spawn Reasons"},u=void 0,s={unversionedId:"reference/entities/spawn-reasons",id:"reference/entities/spawn-reasons",title:"Spawn Reasons",description:"Reason",source:"@site/docs/reference/entities/spawn-reasons.mdx",sourceDirName:"reference/entities",slug:"/reference/entities/spawn-reasons",permalink:"/docs/reference/entities/spawn-reasons",draft:!1,editUrl:"https://github.com/PGMDev/Website/tree/master/src/docs/reference/entities/spawn-reasons.mdx",tags:[],version:"current",frontMatter:{id:"spawn-reasons",title:"Spawn Reasons"},sidebar:"Reference",previous:{title:"Entity Types",permalink:"/docs/reference/entities/entity-types"},next:{title:"Text Formatting",permalink:"/docs/reference/misc/formatting"}},o={},i=[],k={toc:i};function c(t){let{components:e,...n}=t;return(0,r.kt)("wrapper",(0,l.Z)({},k,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("div",{className:"table-container"},(0,r.kt)("table",null,(0,r.kt)("thead",null,(0,r.kt)("tr",null,(0,r.kt)("th",null,"Reason"),(0,r.kt)("th",null,"Description"))),(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("label",null,"NATURAL")),(0,r.kt)("td",null,"When something spawns from natural means.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("label",null,"JOCKEY")),(0,r.kt)("td",null,"When an entity spawns as a jockey of another entity (mostly spider jockeys)")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("label",null,"CHUNK_GEN")),(0,r.kt)("td",null,"When a creature spawns due to chunk generation.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("label",null,"SPAWNER")),(0,r.kt)("td",null,"When a creature spawns from a spawner.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("label",null,"EGG")),(0,r.kt)("td",null,"When a creature spawns from an egg.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("label",null,"SPAWNER_EGG")),(0,r.kt)("td",null,"When a creature spawns from a Spawner Egg.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("label",null,"LIGHTNING")),(0,r.kt)("td",null,"When a creature spawns because of a lightning strike.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("label",null,"BUILD_SNOWMAN")),(0,r.kt)("td",null,"When a snowman is spawned by being built.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("label",null,"BUILD_IRONGOLEM")),(0,r.kt)("td",null,"When an iron golem is spawned by being built.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("label",null,"BUILD_WITHER")),(0,r.kt)("td",null,"When a wither boss is spawned by being built.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("label",null,"VILLAGE_DEFENSE")),(0,r.kt)("td",null,"When an iron golem is spawned to defend a village.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("label",null,"VILLAGE_INVASION")),(0,r.kt)("td",null,"When a zombie is spawned to invade a village.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("label",null,"BREEDING")),(0,r.kt)("td",null,"When an animal breeds to create a child.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("label",null,"SLIME_SPLIT")),(0,r.kt)("td",null,"When a slime splits.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("label",null,"REINFORCEMENTS")),(0,r.kt)("td",null,"When an entity calls for reinforcements.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("label",null,"NETHER_PORTAL")),(0,r.kt)("td",null,"When a creature is spawned by nether portal.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("label",null,"DISPENSE_EGG")),(0,r.kt)("td",null,"When a creature is spawned by a dispenser dispensing an egg.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("label",null,"INFECTION")),(0,r.kt)("td",null,"When a zombie infects a villager.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("label",null,"CURED")),(0,r.kt)("td",null,"When a villager is cured from infection.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("label",null,"OCELOT_BABY")),(0,r.kt)("td",null,"When an ocelot has a baby spawned along with them.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("label",null,"SILVERFISH_BLOCK")),(0,r.kt)("td",null,"When a silverfish spawns from a block.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("label",null,"MOUNT")),(0,r.kt)("td",null,"When an entity spawns as a mount of another entity (mostly chicken jockeys)")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("label",null,"TRAP")),(0,r.kt)("td",null,"When an entity spawns as a trap for approaching player(s).")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("label",null,"CUSTOM")),(0,r.kt)("td",null,"When a creature is spawned by plugins.")),(0,r.kt)("tr",null,(0,r.kt)("td",null,(0,r.kt)("label",null,"DEFAULT")),(0,r.kt)("td",null,"When an entity is missing a SpawnReason."))))),(0,r.kt)("p",null,"Copied from: ",(0,r.kt)("a",{parentName:"p",href:"https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/event/entity/CreatureSpawnEvent.SpawnReason.html"},"bukkit docs - Spawn Reason")))}c.isMDXComponent=!0}}]);