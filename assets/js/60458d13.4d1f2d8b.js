"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9547],{7114:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>c,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var t=i(5893),r=i(1151);const s={id:"applying-to-regions",title:"Using Filters and Regions"},a=void 0,l={id:"guides/xml-pointers/applying-to-regions",title:"Using Filters and Regions",description:"Regions define areas that can later be applied to Filters",source:"@site/docs/guides/xml-pointers/applying-to-regions.mdx",sourceDirName:"guides/xml-pointers",slug:"/guides/xml-pointers/applying-to-regions",permalink:"/docs/guides/xml-pointers/applying-to-regions",draft:!1,unlisted:!1,editUrl:"https://github.com/PGMDev/Website/tree/master/docs/guides/xml-pointers/applying-to-regions.mdx",tags:[],version:"current",frontMatter:{id:"applying-to-regions",title:"Using Filters and Regions"},sidebar:"Guides",previous:{title:"Defining Regions",permalink:"/docs/guides/xml-pointers/regions"},next:{title:"Filter Apply Order",permalink:"/docs/guides/xml-pointers/filter-apply-order"}},o={},d=[{value:"Creating a Filter",id:"creating-a-filter",level:2},{value:"Creating a Region",id:"creating-a-region",level:2},{value:"Applying a Filter to a Region",id:"applying-a-filter-to-a-region",level:2},{value:"Applying things to multiple regions",id:"applying-things-to-multiple-regions",level:2}];function p(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Regions define areas that can later be applied to ",(0,t.jsx)(n.a,{href:"/docs/modules/mechanics/filters",children:"Filters"}),"\nand other modules.\nUnderstanding how modules, regions and filters work together is important to make critical mechanics for a map."]}),"\n",(0,t.jsx)(n.h2,{id:"creating-a-filter",children:"Creating a Filter"}),"\n",(0,t.jsxs)(n.p,{children:["Creating a ",(0,t.jsx)(n.a,{href:"/docs/modules/mechanics/filters",children:"Filter"})," allows us to put restrictions on certain events.\nWe want to stop players from entering their enemy's spawn region, usually to prevent spawnkilling.\nOur goal is to filter players that are entering a region, so we will make basic filters that matches for\nplayers on a certain team."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'<filters>\n    \x3c!-- Filter will pass ALLOW if player is on Red Team --\x3e\n    <team id="only-red">red-team</team>\n    <team id="only-blue">blue-team</team>\n</filters>\n'})}),"\n",(0,t.jsx)(n.h2,{id:"creating-a-region",children:"Creating a Region"}),"\n",(0,t.jsxs)(n.p,{children:["Creating a ",(0,t.jsx)(n.a,{href:"docs/modules/mechanics/filters",children:"Region"})," involves certain world coordinates.\nIn this example, we will create simple ",(0,t.jsx)(n.code,{children:"<cuboid/>"})," regions inside a ",(0,t.jsx)(n.code,{children:"<union>"}),", which we will save with IDs\nwhich we can reference for later use."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'<regions>\n    <union id="spawns">\n        <cuboid id="red-spawn" min="20,0,55" max="40,10,75"/>\n        <cuboid id="blue-spawn" min="10,0,-55" max="30,10,-75"/>\n    </union>\n</regions>\n'})}),"\n",(0,t.jsx)(n.h2,{id:"applying-a-filter-to-a-region",children:"Applying a Filter to a Region"}),"\n",(0,t.jsxs)(n.p,{children:["Applying filters to a region is done inside the ",(0,t.jsx)(n.code,{children:"<regions>"})," module.\nWhen we make our ",(0,t.jsx)(n.code,{children:"<apply/>"})," module, we can use the IDs in our region and filter to reference them as a variable.\nOut of the various ",(0,t.jsx)(n.a,{href:"/docs/modules/mechanics/regions#apply-element-attributes",children:"events"}),",\nwe will use the ",(0,t.jsx)(n.code,{children:"enter"})," event.\nWhen a player enters ",(0,t.jsx)(n.code,{children:"red-spawn"}),", we want to make sure that only players on the red team are able to enter it.\nSo we apply our ",(0,t.jsx)(n.code,{children:"only-red"})," filter to players that are entering it."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'<filters>\n    <team id="only-red">red-team</team>\n    <team id="only-blue">blue-team</team>\n</filters>\n<regions>\n    <union id="spawns">\n        <cuboid id="red-spawn" min="20,0,55" max="40,10,75"/>\n        <cuboid id="blue-spawn" min="10,0,-55" max="30,10,-75"/>\n    </union>\n    \x3c!-- checks only-red if a player is allowed to enter --\x3e\n    <apply region="red-spawn" enter="only-red"/>\n    <apply region="blue-spawn" enter="only-blue"/>\n</regions>\n'})}),"\n",(0,t.jsx)(n.h2,{id:"applying-things-to-multiple-regions",children:"Applying things to multiple regions"}),"\n",(0,t.jsxs)(n.p,{children:["Typically we want to prevent players from placing or breaking any blocks in spawn, but\nwe have two spawn regions defined in our XML, and both need spawn protection.\nThe ",(0,t.jsx)(n.code,{children:"<union>"})," element using the ID ",(0,t.jsx)(n.code,{children:"spawns"})," combines the two team spawns into a single region.\nUsing ",(0,t.jsx)(n.code,{children:"spawns"})," with ",(0,t.jsx)(n.code,{children:"<apply/>"})," will let us apply a filter to both regions.\nWe will use the built-in ",(0,t.jsx)(n.code,{children:"never"})," filter, which denies everything.\nThis XML protects spawn from being damaged by players, TNT, mobs, etc and prevents\nplayers from entering their enemy's spawn room, but can still safely enter their own."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'<filters>\n    <team id="only-red">red-team</team>\n    <team id="only-blue">blue-team</team>\n</filters>\n<regions>\n    <union id="spawns">\n        <cuboid id="red-spawn" min="20,0,55" max="40,10,75"/>\n        <cuboid id="blue-spawn" min="10,0,-55" max="30,10,-75"/>\n    </union>\n    <apply region="red-spawn" enter="only-red"/>\n    <apply region="blue-spawn" enter="only-blue"/>\n    \x3c!-- denies all block breaking and placing in both red-spawn and blue-spawn --\x3e\n    <apply region="spawns" block="never"/>\n</regions>\n'})})]})}function c(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>l,a:()=>a});var t=i(7294);const r={},s=t.createContext(r);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);